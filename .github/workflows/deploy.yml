name: Build and Deploy to AKS

on:
  push:
    branches: [ main ]  # Trigger on push to main branch

permissions:
  id-token: write
  contents: write
  deployments: write

env:
  ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: ${{ secrets.IMAGE_NAME }}
  BUILD_ID: build-${{ github.run_number }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          auth-type: SERVICE_PRINCIPAL

      - name: ACR Login
        run: az acr login --name ${{ secrets.ACR_NAME }}

      - name: Set up Docker Buildx
        run: docker buildx create --use

      - name: Build and Push Multi-Arch Docker Image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
          -t $ACR_LOGIN_SERVER/$IMAGE_NAME:latest \
          -t $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ env.BUILD_ID }} \
          --push .


  deploy-to-aks:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          auth-type: SERVICE_PRINCIPAL

      - name: Set AKS Context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Replace Image Tag in Manifest
        run: |
          sed -i "s|IMAGE_PLACEHOLDER|$ACR_LOGIN_SERVER/$IMAGE_NAME:${{ env.BUILD_ID }}|" k8s/deployment.yaml

      - name: Print Image Info
        run: |
          echo "Deploying image: $ACR_LOGIN_SERVER/$IMAGE_NAME:${{ env.BUILD_ID }}"

      - name: Deploy to AKS
        run: kubectl apply -f k8s/deployment.yaml

      - name: Get Pods
        run: kubectl get pods

      - name: Get AKS Node External IPs
        run: kubectl get nodes -o wide
